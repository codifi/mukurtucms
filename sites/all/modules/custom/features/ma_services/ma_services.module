<?php
/**
 * @file
 * Code for the Mukurtu Services feature.
 */

include_once 'ma_services.features.inc';

/**
 * Implements of hook_services_resources().
 */
function ma_services_services_resources() {
  $api = array(
    'scald' => array(
      'operations' => array(
        'create' => array(
          'help' => 'Creates a scald atom',
          'callback' => '_ma_services_create_atom',
          'access callback' => 'user_access',
          'access arguments' => array('create atom of any type'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'fn',
              'type' => 'string',
              'description' => 'Function to perform',
              'source' => array('path' => '0'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'id',
              'type' => 'string',
              'description' => 'ID (File ID, Youtube ID, Video ID)',
              'source' => array('param' => 'id'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'external',
              'type' => 'string',
              'description' => '"Youtube" or "Vimeo"',
              'source' => array('param' => 'external'),
              'optional' => TRUE,
            ),
            array(
              'name' => 'title',
              'type' => 'string',
              'description' => 'title',
              'source' => array('param' => 'title'),
              'optional' => TRUE,
            ),
            array(
              'name' => 'author',
              'type' => 'string',
              'description' => 'author',
              'source' => array('param' => 'author'),
              'optional' => TRUE,
            ),
            array(
              'name' => 'category',
              'type' => 'string',
              'description' => 'category',
              'source' => array('param' => 'category'),
              'optional' => TRUE,
            ),
          ),
        ),
      ),
    ),
    'groups' => array(
      'operations' => array(
        'index' => array(
          'help' => 'Retrieve all groups that current user can post content to',
          'callback' => '_ma_services_user_groups',
          'access callback' => 'user_access',
          'access arguments' => array('edit own digital_heritage content'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'fn',
              'type' => 'string',
              'description' => 'Function to perform',
              'source' => array('path' => '0'),
              'optional' => FALSE,
            ),
          ),
        ),
      ),
    ),
  );

  return $api;
}

function _ma_services_create_atom ($fn, $id, $external, $title, $author, $category) {

  $resave_atom = 0;

  if ($external) {
    switch ($external) {

      case 'youtube':
      case 'vimeo':

        // The following code is taken from scald_youtube_scald_add_form_fill / scald_vimeo_scald_add_form_fill with two changes: 1. the merging of the two. 2. dropping of the tags and author taxonomy fills (produce entity errors in this context)

        if ($external == 'vimeo') {
          $identifier = scald_vimeo_parse_id($id, TRUE);
          if ($identifier == FALSE) {
            return services_error('invalid Vimeo ID', 406);
          };
          if ($sid = scald_vimeo_already_imported($identifier)) {
            return array(
              'status' => 'atom exists',
              'sid' => $sid,
            );
          }
          $infos = scald_vimeo_video($identifier);
        }

        elseif ($external == 'youtube') {
          $identifier = scald_youtube_parse_id($id, TRUE);
          if ($identifier == FALSE) {
            return services_error('invalid Youtube ID', 406);
          };
          if ($sid = scald_youtube_already_imported($identifier)) {
            return array(
              'status' => 'atom exists',
              'sid' => $sid,
            );
          }
          $infos = scald_youtube_video($identifier['id']);
        }

        // Atom does not exist, needs to be created.
        $atom = new ScaldAtom('video', 'scald_' . $external);

        $atom->base_id = $id;
        if (!isset($atom->data)) {
          $atom->data = array();
        }
        if (isset($identifier['list'])) {
          $atom->data['list'] = $identifier['list'];
        }
        // If the client set a title, use that, otherwise, grab it from the youtube / vimeo property
        // Usually is best here to leave title unset because the video services have good titles
        if (!$title) {
          $atom->title = $infos->title;
        }

        // Save video width and height.
        $atom->data['video_width'] = $infos->width;
        $atom->data['video_height'] = $infos->height;

        // Download a copy of the video thumbnail. This makes it possible
        // to do interesting manipulation with image styles presets.
        $thumb = drupal_http_request($infos->thumbnail['src']);
        if ($thumb->code == 200 && $directory = ScaldAtomController::getThumbnailPath('video')) {
          $dest = $directory . '/youtube-' . $infos->id . '.jpg';
          $file = file_save_data($thumb->data, $dest);

          if ($file) {
            // Set the file status to temporary.
            $query = db_update('file_managed')
              ->condition('fid', $file->fid)
              ->fields(array('status' => 0))
              ->execute();
            $langcode = field_language('scald_atom', $atom, 'scald_thumbnail');
            $atom->scald_thumbnail[$langcode][0] = (array) $file;
          }
        }

        if ($sid = scald_atom_save($atom)) {
        }
        else {
          return services_error('unable to save external atom', 406);
        }

        break;

      default:
        return services_error('invalid external service', 406);

    }
  }

  // Regular file upload
  else {
    $id = intval($id);
    if (!$file = file_load($id)) {
      return services_error('id does not match a file ID', 406);
    }

    // If the client set a title, use that, otherwise, use the filename.
    // Usually best here to set the title by the client
    if (!$title) {
      $title = $file->filename;
    }

    $type = _scald_feeds_get_provider_by_mime_type($file->filemime);

    // Search for a previously imported matching scald atom and use that if found (slight adaptation from scald_feeds_fetch_matching_atom)

    // Check for matching atom title and atom type
    $scald_query = array('title' => $title, 'type' => $type);
    $sids = scald_search($scald_query, FALSE);
    if ($sids != FALSE && (count($sids) > 0)) {
      foreach ($sids as $sid) {

        $atom = scald_atom_load($sid);
        switch ($type) {
          case 'file':
            scald_file_scald_fetch($atom, 'atom');
            break;
          case 'image':
            scald_image_scald_fetch($atom, 'atom');
            break;
          case 'audio':
            scald_audio_scald_fetch($atom, 'atom');
            break;
          case 'video':
            scald_video_scald_fetch($atom, 'atom');
            break;
        }

        // Check for matching filesize and md5
        if (filesize($atom->file_source) == filesize($file->uri) &&
          md5_file($atom->file_source) == md5_file($file->uri)) {
          return array(
            'status' => 'atom exists',
            'sid' => $sid,
          );
          break;
        }
      }
    }

    // Atom does not exist already, needs to be created
    if ($sid = _scald_feeds_save_atom($file->uri, $type, $title)) {

      $atom_wrapper = entity_metadata_wrapper('scald_atom', $sid);

      // For images, populate metadata from exif/xmp/iptc fields
      if ($type == 'image') {

        $resave_atom = 1;

        // Identifier
        $atom_wrapper->field_scald_identifier = $title;

        // Direct metadata population
        $field_assocs = array(
          'field_media_description' => 'field_scald_description',
          'field_iptc_headline' => 'field_scald_headline',
          'field_iptc_copyright' => 'field_licence_std_cc',
          'field_xmp_rights' => 'field_rights',
          'field_iptc_sublocation' => 'field_scald_location',
          'field_xmp_creator' => 'field_scald_creator',
        );

        foreach ($field_assocs as $exif_field => $scald_field) {
          if (isset($file->{$exif_field}[LANGUAGE_NONE][0]['value'])) {
            $atom_wrapper->$scald_field = $file->{$exif_field}[LANGUAGE_NONE][0]['value'];
          }
        }

        /// Non-direct metadata population

        // Created date
        if (isset($file->field_exif_datetime[LANGUAGE_NONE][0]['value'])) {
          $atom_wrapper->field_scald_created->set(strtotime($file->field_exif_datetime[LANGUAGE_NONE][0]['value']));
        }

        // Geolocation
        if (isset($file->field_gps_latitude[LANGUAGE_NONE][0]['value']) && isset($file->field_gps_longitude[LANGUAGE_NONE][0]['value'])) {
          $atom_wrapper->field_scald_geo_location->set(array(
            'lat' => $file->field_gps_latitude[LANGUAGE_NONE][0]['value'],
            'lon' => $file->field_gps_longitude[LANGUAGE_NONE][0]['value']
          ));
        }

        // Keywords (Scald tags)
        // TODO: exif is currently only extracting the first keyword. Make it extract multiple keywords.
        if (isset($file->field_iptc_keywords[LANGUAGE_NONE][0]['value'])) {
          $keyword = $file->field_iptc_keywords[LANGUAGE_NONE][0]['value'];
          $term = ma_core_get_create_tax_term($keyword, 'scald_tags');
          $atom_wrapper->scald_tags = array($term->tid);

        }

      }

    }
    else {
      return services_error('unable to create atom', 406);
    }
  }

  if ($sid) {

    // POST-passed metadata fields
    // TODO: make these fields accept multiple values. Will probably need to pass via json-encoded content as opposed to URL parameters
    $atom_wrapper = entity_metadata_wrapper('scald_atom', $sid);
    if ($author) {
      $term = ma_core_get_create_tax_term ($author, 'scald_authors');
      $atom_wrapper->scald_authors->set(array($term->tid));
      $resave_atom = 1;
    }
    if ($category) {
      $term = ma_core_get_create_tax_term($category, 'category');
      // Cannot set this field with an entity wrapper, so setting directly on the atom instead
      $atom = scald_atom_load($sid);
      $atom->field_category['en'][0]['tid'] = $term->tid;
      scald_atom_save($atom);
    }
    if ($resave_atom) {
      $atom_wrapper->save();
    }

    // Return the SID
    return array (
      'status' => 'atom created',
      'sid' => $sid,
    );
  }
}

// Return the communities and protocols the current user has posting access to
function _ma_services_user_groups ($fn) {
  $groups_list = array();

  $groups = og_get_groups_by_user(null, 'node');
  foreach ($groups as $group) {
    $og_node = node_load($group);
    if ($og_node->type == 'community') {
      $groups_list[] = array (
        'nid' => $og_node->nid,
        'title' => $og_node->title,
        'type' => 'community',
      );
      $cultural_protocols = ma_cultural_protocol_get_cps_user_can_post_to($og_node->nid);
      foreach ($cultural_protocols as $group_nid => $group_title) {
        $groups_list[] = array(
          'nid' => $group_nid,
          'title' => $group_title,
          'type' => 'cultural_protocol',
        );
      }
    }
  }
  
  return $groups_list;
}
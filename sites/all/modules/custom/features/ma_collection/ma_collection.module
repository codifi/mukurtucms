<?php
/**
 * @file
 * Code for the Collection feature.
 */

include_once('ma_collection.features.inc');

/**
 * Implements hook_user_logout().
 */
// Delete the cookie that holds the Collections browse mode setting
function ma_collection_user_logout ($account) {
  setcookie('collections_browse_mode', '', 1, '/');
}

/**
 * Implements template_preprocess_views_view.
 */
function ma_collection_preprocess_views_view(&$vars) {
  $view = &$vars['view'];

  // Add JS for browse mode switcher on Collections view
  if ($view->name == 'collections_grid_list') {
    drupal_add_library('system', 'jquery.cookie');
    drupal_add_js(drupal_get_path('module', 'ma_collection') . '/js/collection_browse_mode_switcher.js');
  }

}

function ma_collection_node_view($node, $view_mode) {
  if ($node->type == 'collection') {

    if ($view_mode == 'full') {

      // Rewrite the DH Items reference field as paged, since there can be hundreds. I could find no way to do this (add a pager to a multivalued field) without custom code. I did try using a custom DS field of a view of referenced DH nodes, thus leveraging the view pager, but I was unable to get the view to sort according to the DH item order (and sort order here matters). This seems efficient enough. The one loss is that the pager isn't AJAX, whereas the views pager is. If we need that, switch back to that method and do a view alter to reorder the items in code.

      $dh_items_per_page = 10;

      // Build the array of all DH items
      if (isset($node->field_digital_heritage_items[LANGUAGE_NONE])) {
        $all_dh_items = array();
        foreach ($node->field_digital_heritage_items[LANGUAGE_NONE] as $index => $dh_item) {
          unset ($node->content['field_digital_heritage_items'][$index]); // Start rewriting the field by removing the existing DH items
          if (node_access('view', $dh_item['entity'])) {
            $dh_node = node_view($dh_item['entity'], 'search_result');
            $all_dh_items[] = drupal_render($dh_node); // Need to render here as opposed to using "rendered entity" in the DS display, as that will attemt to render them *after* this hook runs
          }
        }

        // Initialise the pager
        $current_page = pager_default_initialize(count($all_dh_items), $dh_items_per_page);

        // Split all DH items into pages
        $pages = array_chunk($all_dh_items, $dh_items_per_page, TRUE);

        // Print the DH items for the current page
        $output = "";
        foreach ($pages[$current_page] as $dh_item_to_display) {
          $output .= $dh_item_to_display;
        }

        // Print the pager
        $output .= theme('pager', array('quantity', count($dh_items_per_page)));

        // Rewrite the field output
        $node->content['field_digital_heritage_items'][0]['#markup'] = $output;
      }
    }

    elseif ($view_mode == 'search_result') {

      // In the Collections Grid/List view, if there is no image uploaded for a Collection node, use the first available image atom from the Digital Heritage items in that Collection. If none of the DH items have an image atom, use the thumbnail from the first available non-image atom from the DH items in that Collection. If that atom does not have an uploaded thumbnail, use the default thumbnail for that atom type.

      if (!count($node->field_collection_image)) {
        $collection_emw = entity_metadata_wrapper('node', $node);

        $replacement_image = "";
        foreach ($collection_emw->field_digital_heritage_items->value() as $dh_item) {
          $dh_item_emw = entity_metadata_wrapper('node', $dh_item);
          foreach ($dh_item_emw->field_media_asset->value() as $dh_item_media_index => $dh_item_media) {
            if ($dh_item_media->provider == 'scald_image') {
              $replacement_image = scald_render ($dh_item_emw->field_media_asset->get($dh_item_media_index)->value(), 'ma_scald_search_results');
              break 2;
            }
            elseif (!$replacement_image) {
              // Use the atom thumbnail if there is one
              if (count($dh_item_media->scald_thumbnail)) {
                $replacement_image = theme_image_style (array (
                  'style_name' => 'medium',
                  'path' => $dh_item_media->scald_thumbnail[LANGUAGE_NONE][0]['uri'],
                ));
              }
              // If no atom thumbnail, use our default thumbnails
              else {
                $replacement_image = '<img src = "/' . drupal_get_path('module', 'ma_digitalheritage') . '/images/default_' . $dh_item_media->type . '_thumbnail.jpg">';
              }
            }
          }
        }

        if (isset($replacement_image)) {
          // Rewrite the image field
          $node->content['field_collection_image'] = array(
            '#theme' => 'field',
            '#title' => 'Image',
            '#access' => true,
            '#formater' => 'ma_scald_search_results',
            '#view_mode' => 'search_result',
            '#label_display' => 'hidden',
            '#field_name' => 'field_collection_image',
            '#entity_type' => 'node',
            '#bundle' => 'collection',
            '#weight' => 0,
            '#items' => array(0 => 1), // this just needs at least one value in it
          );

          $node->content['field_collection_image'][0]['#markup'] = $replacement_image;
        }
      }

      // Tooltip and links on DH grid/list views
      if (isset($node->content['field_collection_image'])) {
        foreach ($node->content['field_collection_image'] as $atom_index => $atom) {
          if (!is_numeric($atom_index)) {
            continue;
          }

          // Using CSS for the tooltip (see comments in ma_digitalheritage_node_view for explanation)
          // Also add link here to parent node
          $new_markup = '<a class = "tooltips" href=" ' . url("node/" . $node->nid) . '">' . $atom['#markup'] . '</a>';

          $node->content['field_collection_image'][$atom_index]['#markup'] = $new_markup;

        }
      }

    }

  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ma_collection_form_views_exposed_form_alter(&$form, &$form_state) {

  // Add a button to reset search and filters
  // Search API provides a button on the view that will reset the search, but not the filters. Leaving that off and creating our own that will reset both.
  if (strpos($form['#id'], 'views-exposed-form-collections-grid-list-all') !== FALSE) {
    if (count(arg()) > 1 OR count(drupal_get_query_parameters())) {
      $form['reset'] = array('#markup' => l(t('Reset'),'collections', array('attributes' => array('class' => array ('btn', 'btn-primary', 'form-submit')), 'html' => TRUE)));
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function ma_collection_node_presave($node) {

  // Populate the Digital Heritage Count
  if ($node->type == 'collection') {
    $collection_presave_skip = variable_get('collection_presave_skip', array());
    if (array_key_exists($node->nid, $collection_presave_skip)) {
      unset ($collection_presave_skip[$node->nid]);
      variable_set('collection_presave_skip', $collection_presave_skip);
      return;
    }

    $collection_emw = entity_metadata_wrapper('node', $node);
    $new_count = $collection_emw->field_digital_heritage_items->count();
    $collection_presave_skip[$node->nid] = $node->nid;
    variable_set('collection_presave_skip', $collection_presave_skip);
    $collection_emw->field_digital_heritage_count->set ($new_count);
    $collection_emw->save();
  }

}

/**
 * Implements hook_node_insert().
 */
function ma_collection_node_insert($node) {
  if ($node->type == 'digital_heritage') {
    ma_collection_node_update($node);
  }
}

/**
 * Implements hook_field_attach_delete().
 */
// We need to use this hook instead of hook_node_delete because hook_node_delete runs too early
function ma_collection_field_attach_delete ($entity_type, $entity) {
  if ($entity->type == 'digital_heritage') {
    ma_collection_node_update($entity, 1);
  }
}

/**
 * Implements hook_node_update().
 */
function ma_collection_node_update($node, $deleted = NULL) {

  // Update the Digital Heritage Count on Collection nodes when a DH node adds or removes a Collection reference, or a DH node with a Collection reference is deleted, or a DH node with a Collection reference is cloned
  if ($node->type == 'digital_heritage') {
    $wrapper_new = entity_metadata_wrapper('node', $node);
    $new_refs = ma_core_get_nids_from_array_of_nodes($wrapper_new->field_collection->value());
    $old_refs = array();
    if (!$deleted AND isset($node->original)) {
      $wrapper_old = entity_metadata_wrapper('node', $node->original);
      $old_refs = ma_core_get_nids_from_array_of_nodes($wrapper_old->field_collection->value());
    }
    if ($old_refs <> $new_refs) {
      $refs_added = array_diff ($new_refs, $old_refs);
      $refs_deleted = array_diff ($old_refs, $new_refs);
      $collections_to_recount = array_merge ($refs_added, $refs_deleted);
      foreach ($collections_to_recount as $collection) {
        $query = new EntityFieldQuery();
        $result = $query
          ->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'digital_heritage')
          ->propertyCondition('status', NODE_PUBLISHED) // or else it will retrieve node references for deleted DH items
          ->fieldCondition('field_collection', 'target_id', $collection)
          ->execute();
        $new_count = count($result['node']);
        $collection_presave_skip = variable_get('collection_presave_skip', array());
        $collection_presave_skip[$collection] = $collection;
        variable_set('collection_presave_skip', $collection_presave_skip);
        $collection_emw = entity_metadata_wrapper('node', $collection);
        $collection_emw->field_digital_heritage_count->set($new_count);
        $collection_emw->save();
      }
    }
  }
}

/**
 * Implementation of hook_form_alter().
 */
function ma_collection_form_alter(&$form, $form_state, $form_id) {

  // When deleting a Collection, let the user know on the confirmation message that the DH items will remain
  if ($form_id == 'node_delete_confirm') {
    $node = $form['#node'];
    if ($node->type == 'collection') {
      $form['description']['#markup'] = "<p>This action cannot be undone.</p>This will delete the Collection but not the Digital Heritage items within the Collection.</p>";
    }
  }
}

// Rewrite the Collection node title in the Collection search view to show a count of DH items
function ma_collection_collections_title_with_count ($entity) {
  $dh_count = 0;
  $coll_wrapper = entity_metadata_wrapper('node', $entity);
  $dhs = $coll_wrapper->field_digital_heritage_items->value();
  if (count($dhs)) {
    if (user_access('bypass content access control')) {
      $dh_count = count($dhs);
    }
    else {
      foreach ($dhs as $dh) {
        if (node_access('view', $dh)) {
          $dh_count++;
        }
      }
    }
  }
  return '<h2>' . l ($entity->title . ' (' . $dh_count . ')', 'node/' . $entity->nid) . '</h2>';
}